// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetBungieNetUserByID(ctx context.Context, in *MembershipRequest, opts ...grpc.CallOption) (*GeneralUser, error)
	GetCredentialTypesForTargetAccount(ctx context.Context, in *MembershipRequest, opts ...grpc.CallOption) (*CredentialTypesForAccountResponse, error)
	GetAvailableThemes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableThemesResponse, error)
	GetMembershipDataByID(ctx context.Context, in *MembershipDataRequest, opts ...grpc.CallOption) (*UserMembershipData, error)
	GetMembershipDataForCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserMembershipData, error)
	GetMembershipFromHardLinkedCredential(ctx context.Context, in *HardLinkedCredentialRequest, opts ...grpc.CallOption) (*HardLinkedUserMembership, error)
	SearchByGlobalName(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetBungieNetUserByID(ctx context.Context, in *MembershipRequest, opts ...grpc.CallOption) (*GeneralUser, error) {
	out := new(GeneralUser)
	err := c.cc.Invoke(ctx, "/user.User/GetBungieNetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetCredentialTypesForTargetAccount(ctx context.Context, in *MembershipRequest, opts ...grpc.CallOption) (*CredentialTypesForAccountResponse, error) {
	out := new(CredentialTypesForAccountResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetCredentialTypesForTargetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAvailableThemes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableThemesResponse, error) {
	out := new(AvailableThemesResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetAvailableThemes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetMembershipDataByID(ctx context.Context, in *MembershipDataRequest, opts ...grpc.CallOption) (*UserMembershipData, error) {
	out := new(UserMembershipData)
	err := c.cc.Invoke(ctx, "/user.User/GetMembershipDataByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetMembershipDataForCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserMembershipData, error) {
	out := new(UserMembershipData)
	err := c.cc.Invoke(ctx, "/user.User/GetMembershipDataForCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetMembershipFromHardLinkedCredential(ctx context.Context, in *HardLinkedCredentialRequest, opts ...grpc.CallOption) (*HardLinkedUserMembership, error) {
	out := new(HardLinkedUserMembership)
	err := c.cc.Invoke(ctx, "/user.User/GetMembershipFromHardLinkedCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchByGlobalName(ctx context.Context, in *UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResponse, error) {
	out := new(UserSearchResponse)
	err := c.cc.Invoke(ctx, "/user.User/SearchByGlobalName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetBungieNetUserByID(context.Context, *MembershipRequest) (*GeneralUser, error)
	GetCredentialTypesForTargetAccount(context.Context, *MembershipRequest) (*CredentialTypesForAccountResponse, error)
	GetAvailableThemes(context.Context, *emptypb.Empty) (*AvailableThemesResponse, error)
	GetMembershipDataByID(context.Context, *MembershipDataRequest) (*UserMembershipData, error)
	GetMembershipDataForCurrentUser(context.Context, *emptypb.Empty) (*UserMembershipData, error)
	GetMembershipFromHardLinkedCredential(context.Context, *HardLinkedCredentialRequest) (*HardLinkedUserMembership, error)
	SearchByGlobalName(context.Context, *UserSearchRequest) (*UserSearchResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetBungieNetUserByID(context.Context, *MembershipRequest) (*GeneralUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBungieNetUserByID not implemented")
}
func (UnimplementedUserServer) GetCredentialTypesForTargetAccount(context.Context, *MembershipRequest) (*CredentialTypesForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialTypesForTargetAccount not implemented")
}
func (UnimplementedUserServer) GetAvailableThemes(context.Context, *emptypb.Empty) (*AvailableThemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableThemes not implemented")
}
func (UnimplementedUserServer) GetMembershipDataByID(context.Context, *MembershipDataRequest) (*UserMembershipData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipDataByID not implemented")
}
func (UnimplementedUserServer) GetMembershipDataForCurrentUser(context.Context, *emptypb.Empty) (*UserMembershipData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipDataForCurrentUser not implemented")
}
func (UnimplementedUserServer) GetMembershipFromHardLinkedCredential(context.Context, *HardLinkedCredentialRequest) (*HardLinkedUserMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipFromHardLinkedCredential not implemented")
}
func (UnimplementedUserServer) SearchByGlobalName(context.Context, *UserSearchRequest) (*UserSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByGlobalName not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetBungieNetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetBungieNetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetBungieNetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetBungieNetUserByID(ctx, req.(*MembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetCredentialTypesForTargetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetCredentialTypesForTargetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetCredentialTypesForTargetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetCredentialTypesForTargetAccount(ctx, req.(*MembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAvailableThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAvailableThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetAvailableThemes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAvailableThemes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetMembershipDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetMembershipDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetMembershipDataByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetMembershipDataByID(ctx, req.(*MembershipDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetMembershipDataForCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetMembershipDataForCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetMembershipDataForCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetMembershipDataForCurrentUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetMembershipFromHardLinkedCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardLinkedCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetMembershipFromHardLinkedCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetMembershipFromHardLinkedCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetMembershipFromHardLinkedCredential(ctx, req.(*HardLinkedCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchByGlobalName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchByGlobalName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SearchByGlobalName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchByGlobalName(ctx, req.(*UserSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBungieNetUserByID",
			Handler:    _User_GetBungieNetUserByID_Handler,
		},
		{
			MethodName: "GetCredentialTypesForTargetAccount",
			Handler:    _User_GetCredentialTypesForTargetAccount_Handler,
		},
		{
			MethodName: "GetAvailableThemes",
			Handler:    _User_GetAvailableThemes_Handler,
		},
		{
			MethodName: "GetMembershipDataByID",
			Handler:    _User_GetMembershipDataByID_Handler,
		},
		{
			MethodName: "GetMembershipDataForCurrentUser",
			Handler:    _User_GetMembershipDataForCurrentUser_Handler,
		},
		{
			MethodName: "GetMembershipFromHardLinkedCredential",
			Handler:    _User_GetMembershipFromHardLinkedCredential_Handler,
		},
		{
			MethodName: "SearchByGlobalName",
			Handler:    _User_SearchByGlobalName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user/user.proto",
}
