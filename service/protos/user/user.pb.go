// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: protos/user/user.proto

package user

import (
	enums "github.com/paranoiacblack/destiny2/service/enums"
	groups "github.com/paranoiacblack/destiny2/service/groups"
	ignores "github.com/paranoiacblack/destiny2/service/ignores"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipType              enums.BungieMembershipType `protobuf:"varint,1,opt,name=membership_type,json=membershipType,proto3,enum=enums.BungieMembershipType" json:"membership_type,omitempty"`
	MembershipId                int64                      `protobuf:"varint,2,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	DisplayName                 string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	BungieGlobalDisplayName     string                     `protobuf:"bytes,4,opt,name=bungie_global_display_name,json=bungieGlobalDisplayName,proto3" json:"bungie_global_display_name,omitempty"`
	BungieGlobalDisplayNameCode int32                      `protobuf:"varint,5,opt,name=bungie_global_display_name_code,json=bungieGlobalDisplayNameCode,proto3" json:"bungie_global_display_name_code,omitempty"`
}

func (x *UserMembership) Reset() {
	*x = UserMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMembership) ProtoMessage() {}

func (x *UserMembership) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMembership.ProtoReflect.Descriptor instead.
func (*UserMembership) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserMembership) GetMembershipType() enums.BungieMembershipType {
	if x != nil {
		return x.MembershipType
	}
	return enums.BungieMembershipType(0)
}

func (x *UserMembership) GetMembershipId() int64 {
	if x != nil {
		return x.MembershipId
	}
	return 0
}

func (x *UserMembership) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserMembership) GetBungieGlobalDisplayName() string {
	if x != nil {
		return x.BungieGlobalDisplayName
	}
	return ""
}

func (x *UserMembership) GetBungieGlobalDisplayNameCode() int32 {
	if x != nil {
		return x.BungieGlobalDisplayNameCode
	}
	return 0
}

type CrossSaveUserMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrossSaveOverride           int32                        `protobuf:"varint,1,opt,name=cross_save_override,json=crossSaveOverride,proto3" json:"cross_save_override,omitempty"`
	ApplicableMembershipTypes   []enums.BungieMembershipType `protobuf:"varint,2,rep,packed,name=applicable_membership_types,json=applicableMembershipTypes,proto3,enum=enums.BungieMembershipType" json:"applicable_membership_types,omitempty"`
	IsPublic                    bool                         `protobuf:"varint,3,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	MembershipType              enums.BungieMembershipType   `protobuf:"varint,4,opt,name=membership_type,json=membershipType,proto3,enum=enums.BungieMembershipType" json:"membership_type,omitempty"`
	MembershipId                int64                        `protobuf:"varint,5,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	DisplayName                 string                       `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	BungieGlobalDisplayName     string                       `protobuf:"bytes,7,opt,name=bungie_global_display_name,json=bungieGlobalDisplayName,proto3" json:"bungie_global_display_name,omitempty"`
	BungieGlobalDisplayNameCode int32                        `protobuf:"varint,8,opt,name=bungie_global_display_name_code,json=bungieGlobalDisplayNameCode,proto3" json:"bungie_global_display_name_code,omitempty"`
}

func (x *CrossSaveUserMembership) Reset() {
	*x = CrossSaveUserMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossSaveUserMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossSaveUserMembership) ProtoMessage() {}

func (x *CrossSaveUserMembership) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossSaveUserMembership.ProtoReflect.Descriptor instead.
func (*CrossSaveUserMembership) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{1}
}

func (x *CrossSaveUserMembership) GetCrossSaveOverride() int32 {
	if x != nil {
		return x.CrossSaveOverride
	}
	return 0
}

func (x *CrossSaveUserMembership) GetApplicableMembershipTypes() []enums.BungieMembershipType {
	if x != nil {
		return x.ApplicableMembershipTypes
	}
	return nil
}

func (x *CrossSaveUserMembership) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CrossSaveUserMembership) GetMembershipType() enums.BungieMembershipType {
	if x != nil {
		return x.MembershipType
	}
	return enums.BungieMembershipType(0)
}

func (x *CrossSaveUserMembership) GetMembershipId() int64 {
	if x != nil {
		return x.MembershipId
	}
	return 0
}

func (x *CrossSaveUserMembership) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CrossSaveUserMembership) GetBungieGlobalDisplayName() string {
	if x != nil {
		return x.BungieGlobalDisplayName
	}
	return ""
}

func (x *CrossSaveUserMembership) GetBungieGlobalDisplayNameCode() int32 {
	if x != nil {
		return x.BungieGlobalDisplayNameCode
	}
	return 0
}

type UserInfoCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupplementalDisplayName     string                       `protobuf:"bytes,1,opt,name=supplemental_display_name,json=supplementalDisplayName,proto3" json:"supplemental_display_name,omitempty"`
	IconPath                    string                       `protobuf:"bytes,2,opt,name=icon_path,json=iconPath,proto3" json:"icon_path,omitempty"`
	CrossSaveOverride           int32                        `protobuf:"varint,3,opt,name=cross_save_override,json=crossSaveOverride,proto3" json:"cross_save_override,omitempty"`
	ApplicableMembershipTypes   []enums.BungieMembershipType `protobuf:"varint,4,rep,packed,name=applicable_membership_types,json=applicableMembershipTypes,proto3,enum=enums.BungieMembershipType" json:"applicable_membership_types,omitempty"`
	IsPublic                    bool                         `protobuf:"varint,5,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	MembershipType              enums.BungieMembershipType   `protobuf:"varint,6,opt,name=membership_type,json=membershipType,proto3,enum=enums.BungieMembershipType" json:"membership_type,omitempty"`
	MembershipId                int64                        `protobuf:"varint,7,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	DisplayName                 string                       `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	BungieGlobalDisplayName     string                       `protobuf:"bytes,9,opt,name=bungie_global_display_name,json=bungieGlobalDisplayName,proto3" json:"bungie_global_display_name,omitempty"`
	BungieGlobalDisplayNameCode int32                        `protobuf:"varint,10,opt,name=bungie_global_display_name_code,json=bungieGlobalDisplayNameCode,proto3" json:"bungie_global_display_name_code,omitempty"`
}

func (x *UserInfoCard) Reset() {
	*x = UserInfoCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoCard) ProtoMessage() {}

func (x *UserInfoCard) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoCard.ProtoReflect.Descriptor instead.
func (*UserInfoCard) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfoCard) GetSupplementalDisplayName() string {
	if x != nil {
		return x.SupplementalDisplayName
	}
	return ""
}

func (x *UserInfoCard) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *UserInfoCard) GetCrossSaveOverride() int32 {
	if x != nil {
		return x.CrossSaveOverride
	}
	return 0
}

func (x *UserInfoCard) GetApplicableMembershipTypes() []enums.BungieMembershipType {
	if x != nil {
		return x.ApplicableMembershipTypes
	}
	return nil
}

func (x *UserInfoCard) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *UserInfoCard) GetMembershipType() enums.BungieMembershipType {
	if x != nil {
		return x.MembershipType
	}
	return enums.BungieMembershipType(0)
}

func (x *UserInfoCard) GetMembershipId() int64 {
	if x != nil {
		return x.MembershipId
	}
	return 0
}

func (x *UserInfoCard) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserInfoCard) GetBungieGlobalDisplayName() string {
	if x != nil {
		return x.BungieGlobalDisplayName
	}
	return ""
}

func (x *UserInfoCard) GetBungieGlobalDisplayNameCode() int32 {
	if x != nil {
		return x.BungieGlobalDisplayNameCode
	}
	return 0
}

type UserToUserContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFollowing         bool                    `protobuf:"varint,1,opt,name=is_following,json=isFollowing,proto3" json:"is_following,omitempty"`
	IgnoreStatus        *ignores.IgnoreResponse `protobuf:"bytes,2,opt,name=ignore_status,json=ignoreStatus,proto3" json:"ignore_status,omitempty"`
	GlobalIgnoreEndDate *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=global_ignore_end_date,json=globalIgnoreEndDate,proto3" json:"global_ignore_end_date,omitempty"`
}

func (x *UserToUserContext) Reset() {
	*x = UserToUserContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToUserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToUserContext) ProtoMessage() {}

func (x *UserToUserContext) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToUserContext.ProtoReflect.Descriptor instead.
func (*UserToUserContext) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{3}
}

func (x *UserToUserContext) GetIsFollowing() bool {
	if x != nil {
		return x.IsFollowing
	}
	return false
}

func (x *UserToUserContext) GetIgnoreStatus() *ignores.IgnoreResponse {
	if x != nil {
		return x.IgnoreStatus
	}
	return nil
}

func (x *UserToUserContext) GetGlobalIgnoreEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.GlobalIgnoreEndDate
	}
	return nil
}

type GeneralUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipId                      int64                  `protobuf:"varint,1,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	UniqueName                        string                 `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty"`
	NormalizedName                    string                 `protobuf:"bytes,3,opt,name=normalized_name,json=normalizedName,proto3" json:"normalized_name,omitempty"`
	DisplayName                       string                 `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ProfilePicture                    int32                  `protobuf:"varint,5,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`
	ProfileTheme                      int32                  `protobuf:"varint,6,opt,name=profile_theme,json=profileTheme,proto3" json:"profile_theme,omitempty"`
	UserTitle                         int32                  `protobuf:"varint,7,opt,name=user_title,json=userTitle,proto3" json:"user_title,omitempty"`
	SuccessMessageFlags               int64                  `protobuf:"varint,8,opt,name=success_message_flags,json=successMessageFlags,proto3" json:"success_message_flags,omitempty"`
	IsDeleted                         bool                   `protobuf:"varint,9,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	About                             string                 `protobuf:"bytes,10,opt,name=about,proto3" json:"about,omitempty"`
	FirstAccess                       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=first_access,json=firstAccess,proto3" json:"first_access,omitempty"`
	LastUpdate                        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	LegacyPortalUid                   int64                  `protobuf:"varint,13,opt,name=legacy_portal_uid,json=legacyPortalUid,proto3" json:"legacy_portal_uid,omitempty"`
	Context                           *UserToUserContext     `protobuf:"bytes,14,opt,name=context,proto3" json:"context,omitempty"`
	PsnDisplayName                    string                 `protobuf:"bytes,15,opt,name=psn_display_name,json=psnDisplayName,proto3" json:"psn_display_name,omitempty"`
	XboxDisplayName                   string                 `protobuf:"bytes,16,opt,name=xbox_display_name,json=xboxDisplayName,proto3" json:"xbox_display_name,omitempty"`
	FbDisplayName                     string                 `protobuf:"bytes,17,opt,name=fb_display_name,json=fbDisplayName,proto3" json:"fb_display_name,omitempty"`
	ShowActivity                      bool                   `protobuf:"varint,18,opt,name=show_activity,json=showActivity,proto3" json:"show_activity,omitempty"`
	Locale                            string                 `protobuf:"bytes,19,opt,name=locale,proto3" json:"locale,omitempty"`
	LocaleInheritDefault              bool                   `protobuf:"varint,20,opt,name=locale_inherit_default,json=localeInheritDefault,proto3" json:"locale_inherit_default,omitempty"`
	LastBanReportId                   int64                  `protobuf:"varint,21,opt,name=last_ban_report_id,json=lastBanReportId,proto3" json:"last_ban_report_id,omitempty"`
	ShowGroupMessaging                bool                   `protobuf:"varint,22,opt,name=show_group_messaging,json=showGroupMessaging,proto3" json:"show_group_messaging,omitempty"`
	ProfilePicturePath                string                 `protobuf:"bytes,23,opt,name=profile_picture_path,json=profilePicturePath,proto3" json:"profile_picture_path,omitempty"`
	ProfilePictureWidePath            string                 `protobuf:"bytes,24,opt,name=profile_picture_wide_path,json=profilePictureWidePath,proto3" json:"profile_picture_wide_path,omitempty"`
	ProfileThemeName                  string                 `protobuf:"bytes,25,opt,name=profile_theme_name,json=profileThemeName,proto3" json:"profile_theme_name,omitempty"`
	UserTitleDisplay                  string                 `protobuf:"bytes,26,opt,name=user_title_display,json=userTitleDisplay,proto3" json:"user_title_display,omitempty"`
	StatusText                        string                 `protobuf:"bytes,27,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	StatusDate                        *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	ProfileBanExpire                  *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=profile_ban_expire,json=profileBanExpire,proto3" json:"profile_ban_expire,omitempty"`
	BlizzardDisplayName               string                 `protobuf:"bytes,30,opt,name=blizzard_display_name,json=blizzardDisplayName,proto3" json:"blizzard_display_name,omitempty"`
	SteamDisplayName                  string                 `protobuf:"bytes,31,opt,name=steam_display_name,json=steamDisplayName,proto3" json:"steam_display_name,omitempty"`
	StadiaDisplayName                 string                 `protobuf:"bytes,32,opt,name=stadia_display_name,json=stadiaDisplayName,proto3" json:"stadia_display_name,omitempty"`
	TwitchDisplayName                 string                 `protobuf:"bytes,33,opt,name=twitch_display_name,json=twitchDisplayName,proto3" json:"twitch_display_name,omitempty"`
	CachedBungieGlobalDisplayName     string                 `protobuf:"bytes,34,opt,name=cached_bungie_global_display_name,json=cachedBungieGlobalDisplayName,proto3" json:"cached_bungie_global_display_name,omitempty"`
	CachedBungieGlobalDisplayNameCode int32                  `protobuf:"varint,35,opt,name=cached_bungie_global_display_name_code,json=cachedBungieGlobalDisplayNameCode,proto3" json:"cached_bungie_global_display_name_code,omitempty"`
}

func (x *GeneralUser) Reset() {
	*x = GeneralUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralUser) ProtoMessage() {}

func (x *GeneralUser) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralUser.ProtoReflect.Descriptor instead.
func (*GeneralUser) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{4}
}

func (x *GeneralUser) GetMembershipId() int64 {
	if x != nil {
		return x.MembershipId
	}
	return 0
}

func (x *GeneralUser) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

func (x *GeneralUser) GetNormalizedName() string {
	if x != nil {
		return x.NormalizedName
	}
	return ""
}

func (x *GeneralUser) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GeneralUser) GetProfilePicture() int32 {
	if x != nil {
		return x.ProfilePicture
	}
	return 0
}

func (x *GeneralUser) GetProfileTheme() int32 {
	if x != nil {
		return x.ProfileTheme
	}
	return 0
}

func (x *GeneralUser) GetUserTitle() int32 {
	if x != nil {
		return x.UserTitle
	}
	return 0
}

func (x *GeneralUser) GetSuccessMessageFlags() int64 {
	if x != nil {
		return x.SuccessMessageFlags
	}
	return 0
}

func (x *GeneralUser) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *GeneralUser) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *GeneralUser) GetFirstAccess() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstAccess
	}
	return nil
}

func (x *GeneralUser) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GeneralUser) GetLegacyPortalUid() int64 {
	if x != nil {
		return x.LegacyPortalUid
	}
	return 0
}

func (x *GeneralUser) GetContext() *UserToUserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GeneralUser) GetPsnDisplayName() string {
	if x != nil {
		return x.PsnDisplayName
	}
	return ""
}

func (x *GeneralUser) GetXboxDisplayName() string {
	if x != nil {
		return x.XboxDisplayName
	}
	return ""
}

func (x *GeneralUser) GetFbDisplayName() string {
	if x != nil {
		return x.FbDisplayName
	}
	return ""
}

func (x *GeneralUser) GetShowActivity() bool {
	if x != nil {
		return x.ShowActivity
	}
	return false
}

func (x *GeneralUser) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *GeneralUser) GetLocaleInheritDefault() bool {
	if x != nil {
		return x.LocaleInheritDefault
	}
	return false
}

func (x *GeneralUser) GetLastBanReportId() int64 {
	if x != nil {
		return x.LastBanReportId
	}
	return 0
}

func (x *GeneralUser) GetShowGroupMessaging() bool {
	if x != nil {
		return x.ShowGroupMessaging
	}
	return false
}

func (x *GeneralUser) GetProfilePicturePath() string {
	if x != nil {
		return x.ProfilePicturePath
	}
	return ""
}

func (x *GeneralUser) GetProfilePictureWidePath() string {
	if x != nil {
		return x.ProfilePictureWidePath
	}
	return ""
}

func (x *GeneralUser) GetProfileThemeName() string {
	if x != nil {
		return x.ProfileThemeName
	}
	return ""
}

func (x *GeneralUser) GetUserTitleDisplay() string {
	if x != nil {
		return x.UserTitleDisplay
	}
	return ""
}

func (x *GeneralUser) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *GeneralUser) GetStatusDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *GeneralUser) GetProfileBanExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.ProfileBanExpire
	}
	return nil
}

func (x *GeneralUser) GetBlizzardDisplayName() string {
	if x != nil {
		return x.BlizzardDisplayName
	}
	return ""
}

func (x *GeneralUser) GetSteamDisplayName() string {
	if x != nil {
		return x.SteamDisplayName
	}
	return ""
}

func (x *GeneralUser) GetStadiaDisplayName() string {
	if x != nil {
		return x.StadiaDisplayName
	}
	return ""
}

func (x *GeneralUser) GetTwitchDisplayName() string {
	if x != nil {
		return x.TwitchDisplayName
	}
	return ""
}

func (x *GeneralUser) GetCachedBungieGlobalDisplayName() string {
	if x != nil {
		return x.CachedBungieGlobalDisplayName
	}
	return ""
}

func (x *GeneralUser) GetCachedBungieGlobalDisplayNameCode() int32 {
	if x != nil {
		return x.CachedBungieGlobalDisplayNameCode
	}
	return 0
}

type MembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipId int64 `protobuf:"varint,1,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
}

func (x *MembershipRequest) Reset() {
	*x = MembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipRequest) ProtoMessage() {}

func (x *MembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipRequest.ProtoReflect.Descriptor instead.
func (*MembershipRequest) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{5}
}

func (x *MembershipRequest) GetMembershipId() int64 {
	if x != nil {
		return x.MembershipId
	}
	return 0
}

type UserTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserThemeId          int32  `protobuf:"varint,1,opt,name=user_theme_id,json=userThemeId,proto3" json:"user_theme_id,omitempty"`
	UserThemeName        string `protobuf:"bytes,2,opt,name=user_theme_name,json=userThemeName,proto3" json:"user_theme_name,omitempty"`
	UserThemeDescription string `protobuf:"bytes,3,opt,name=user_theme_description,json=userThemeDescription,proto3" json:"user_theme_description,omitempty"`
}

func (x *UserTheme) Reset() {
	*x = UserTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTheme) ProtoMessage() {}

func (x *UserTheme) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTheme.ProtoReflect.Descriptor instead.
func (*UserTheme) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{6}
}

func (x *UserTheme) GetUserThemeId() int32 {
	if x != nil {
		return x.UserThemeId
	}
	return 0
}

func (x *UserTheme) GetUserThemeName() string {
	if x != nil {
		return x.UserThemeName
	}
	return ""
}

func (x *UserTheme) GetUserThemeDescription() string {
	if x != nil {
		return x.UserThemeDescription
	}
	return ""
}

type AvailableThemesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Themes []*UserTheme `protobuf:"bytes,1,rep,name=themes,proto3" json:"themes,omitempty"`
}

func (x *AvailableThemesResponse) Reset() {
	*x = AvailableThemesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableThemesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableThemesResponse) ProtoMessage() {}

func (x *AvailableThemesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableThemesResponse.ProtoReflect.Descriptor instead.
func (*AvailableThemesResponse) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{7}
}

func (x *AvailableThemesResponse) GetThemes() []*UserTheme {
	if x != nil {
		return x.Themes
	}
	return nil
}

type CredentialTypesForAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*CredentialTypesForAccountResponse_CredentialTypeForAccount `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *CredentialTypesForAccountResponse) Reset() {
	*x = CredentialTypesForAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialTypesForAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialTypesForAccountResponse) ProtoMessage() {}

func (x *CredentialTypesForAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialTypesForAccountResponse.ProtoReflect.Descriptor instead.
func (*CredentialTypesForAccountResponse) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{8}
}

func (x *CredentialTypesForAccountResponse) GetCredentials() []*CredentialTypesForAccountResponse_CredentialTypeForAccount {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type MembershipDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipId   int64                      `protobuf:"varint,1,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	MembershipType enums.BungieMembershipType `protobuf:"varint,2,opt,name=membership_type,json=membershipType,proto3,enum=enums.BungieMembershipType" json:"membership_type,omitempty"`
}

func (x *MembershipDataRequest) Reset() {
	*x = MembershipDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipDataRequest) ProtoMessage() {}

func (x *MembershipDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipDataRequest.ProtoReflect.Descriptor instead.
func (*MembershipDataRequest) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{9}
}

func (x *MembershipDataRequest) GetMembershipId() int64 {
	if x != nil {
		return x.MembershipId
	}
	return 0
}

func (x *MembershipDataRequest) GetMembershipType() enums.BungieMembershipType {
	if x != nil {
		return x.MembershipType
	}
	return enums.BungieMembershipType(0)
}

type UserMembershipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinyMemberships  []*groups.GroupUserInfoCard `protobuf:"bytes,1,rep,name=destiny_memberships,json=destinyMemberships,proto3" json:"destiny_memberships,omitempty"`
	PrimaryMembershipId int64                       `protobuf:"varint,2,opt,name=primary_membership_id,json=primaryMembershipId,proto3" json:"primary_membership_id,omitempty"`
	BungieNetUser       *GeneralUser                `protobuf:"bytes,3,opt,name=bungie_net_user,json=bungieNetUser,proto3" json:"bungie_net_user,omitempty"`
}

func (x *UserMembershipData) Reset() {
	*x = UserMembershipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMembershipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMembershipData) ProtoMessage() {}

func (x *UserMembershipData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMembershipData.ProtoReflect.Descriptor instead.
func (*UserMembershipData) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{10}
}

func (x *UserMembershipData) GetDestinyMemberships() []*groups.GroupUserInfoCard {
	if x != nil {
		return x.DestinyMemberships
	}
	return nil
}

func (x *UserMembershipData) GetPrimaryMembershipId() int64 {
	if x != nil {
		return x.PrimaryMembershipId
	}
	return 0
}

func (x *UserMembershipData) GetBungieNetUser() *GeneralUser {
	if x != nil {
		return x.BungieNetUser
	}
	return nil
}

type HardLinkedCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential string                     `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	CrType     enums.BungieCredentialType `protobuf:"varint,2,opt,name=cr_type,json=crType,proto3,enum=enums.BungieCredentialType" json:"cr_type,omitempty"`
}

func (x *HardLinkedCredentialRequest) Reset() {
	*x = HardLinkedCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardLinkedCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardLinkedCredentialRequest) ProtoMessage() {}

func (x *HardLinkedCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardLinkedCredentialRequest.ProtoReflect.Descriptor instead.
func (*HardLinkedCredentialRequest) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{11}
}

func (x *HardLinkedCredentialRequest) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *HardLinkedCredentialRequest) GetCrType() enums.BungieCredentialType {
	if x != nil {
		return x.CrType
	}
	return enums.BungieCredentialType(0)
}

type HardLinkedUserMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipType                 enums.BungieMembershipType `protobuf:"varint,1,opt,name=membership_type,json=membershipType,proto3,enum=enums.BungieMembershipType" json:"membership_type,omitempty"`
	MembershipId                   int64                      `protobuf:"varint,2,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	CrossSaveOverridenType         int32                      `protobuf:"varint,3,opt,name=cross_save_overriden_type,json=crossSaveOverridenType,proto3" json:"cross_save_overriden_type,omitempty"`
	CrossSaveOverridenMembershipId int64                      `protobuf:"varint,4,opt,name=cross_save_overriden_membership_id,json=crossSaveOverridenMembershipId,proto3" json:"cross_save_overriden_membership_id,omitempty"`
}

func (x *HardLinkedUserMembership) Reset() {
	*x = HardLinkedUserMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardLinkedUserMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardLinkedUserMembership) ProtoMessage() {}

func (x *HardLinkedUserMembership) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardLinkedUserMembership.ProtoReflect.Descriptor instead.
func (*HardLinkedUserMembership) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{12}
}

func (x *HardLinkedUserMembership) GetMembershipType() enums.BungieMembershipType {
	if x != nil {
		return x.MembershipType
	}
	return enums.BungieMembershipType(0)
}

func (x *HardLinkedUserMembership) GetMembershipId() int64 {
	if x != nil {
		return x.MembershipId
	}
	return 0
}

func (x *HardLinkedUserMembership) GetCrossSaveOverridenType() int32 {
	if x != nil {
		return x.CrossSaveOverridenType
	}
	return 0
}

func (x *HardLinkedUserMembership) GetCrossSaveOverridenMembershipId() int64 {
	if x != nil {
		return x.CrossSaveOverridenMembershipId
	}
	return 0
}

type UserSearchPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayNamePrefix string `protobuf:"bytes,1,opt,name=display_name_prefix,json=displayNamePrefix,proto3" json:"display_name_prefix,omitempty"`
}

func (x *UserSearchPrefixRequest) Reset() {
	*x = UserSearchPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSearchPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchPrefixRequest) ProtoMessage() {}

func (x *UserSearchPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchPrefixRequest.ProtoReflect.Descriptor instead.
func (*UserSearchPrefixRequest) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{13}
}

func (x *UserSearchPrefixRequest) GetDisplayNamePrefix() string {
	if x != nil {
		return x.DisplayNamePrefix
	}
	return ""
}

type UserSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix *UserSearchPrefixRequest `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Page   int32                    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *UserSearchRequest) Reset() {
	*x = UserSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchRequest) ProtoMessage() {}

func (x *UserSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchRequest.ProtoReflect.Descriptor instead.
func (*UserSearchRequest) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{14}
}

func (x *UserSearchRequest) GetPrefix() *UserSearchPrefixRequest {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *UserSearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type UserSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchResults []*UserSearchResponse_UserSearchResponseDetail `protobuf:"bytes,1,rep,name=search_results,json=searchResults,proto3" json:"search_results,omitempty"`
	Page          int32                                          `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	HasMore       bool                                           `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *UserSearchResponse) Reset() {
	*x = UserSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchResponse) ProtoMessage() {}

func (x *UserSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchResponse.ProtoReflect.Descriptor instead.
func (*UserSearchResponse) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{15}
}

func (x *UserSearchResponse) GetSearchResults() []*UserSearchResponse_UserSearchResponseDetail {
	if x != nil {
		return x.SearchResults
	}
	return nil
}

func (x *UserSearchResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserSearchResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type CredentialTypesForAccountResponse_CredentialTypeForAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType        enums.BungieCredentialType `protobuf:"varint,1,opt,name=credential_type,json=credentialType,proto3,enum=enums.BungieCredentialType" json:"credential_type,omitempty"`
	CredentialDisplayName string                     `protobuf:"bytes,2,opt,name=credential_display_name,json=credentialDisplayName,proto3" json:"credential_display_name,omitempty"`
	IsPublic              bool                       `protobuf:"varint,3,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	CredentialAsString    string                     `protobuf:"bytes,4,opt,name=credential_as_string,json=credentialAsString,proto3" json:"credential_as_string,omitempty"`
}

func (x *CredentialTypesForAccountResponse_CredentialTypeForAccount) Reset() {
	*x = CredentialTypesForAccountResponse_CredentialTypeForAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialTypesForAccountResponse_CredentialTypeForAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialTypesForAccountResponse_CredentialTypeForAccount) ProtoMessage() {}

func (x *CredentialTypesForAccountResponse_CredentialTypeForAccount) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialTypesForAccountResponse_CredentialTypeForAccount.ProtoReflect.Descriptor instead.
func (*CredentialTypesForAccountResponse_CredentialTypeForAccount) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CredentialTypesForAccountResponse_CredentialTypeForAccount) GetCredentialType() enums.BungieCredentialType {
	if x != nil {
		return x.CredentialType
	}
	return enums.BungieCredentialType(0)
}

func (x *CredentialTypesForAccountResponse_CredentialTypeForAccount) GetCredentialDisplayName() string {
	if x != nil {
		return x.CredentialDisplayName
	}
	return ""
}

func (x *CredentialTypesForAccountResponse_CredentialTypeForAccount) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CredentialTypesForAccountResponse_CredentialTypeForAccount) GetCredentialAsString() string {
	if x != nil {
		return x.CredentialAsString
	}
	return ""
}

type UserSearchResponse_UserSearchResponseDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BungieGlobalDisplayName     string          `protobuf:"bytes,1,opt,name=bungie_global_display_name,json=bungieGlobalDisplayName,proto3" json:"bungie_global_display_name,omitempty"`
	BungieGlobalDisplayNameCode int32           `protobuf:"varint,2,opt,name=bungie_global_display_name_code,json=bungieGlobalDisplayNameCode,proto3" json:"bungie_global_display_name_code,omitempty"`
	BungieNetMembershipId       int64           `protobuf:"varint,3,opt,name=bungie_net_membership_id,json=bungieNetMembershipId,proto3" json:"bungie_net_membership_id,omitempty"`
	DestinyMemberships          []*UserInfoCard `protobuf:"bytes,4,rep,name=destiny_memberships,json=destinyMemberships,proto3" json:"destiny_memberships,omitempty"`
}

func (x *UserSearchResponse_UserSearchResponseDetail) Reset() {
	*x = UserSearchResponse_UserSearchResponseDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_user_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSearchResponse_UserSearchResponseDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchResponse_UserSearchResponseDetail) ProtoMessage() {}

func (x *UserSearchResponse_UserSearchResponseDetail) ProtoReflect() protoreflect.Message {
	mi := &file_protos_user_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchResponse_UserSearchResponseDetail.ProtoReflect.Descriptor instead.
func (*UserSearchResponse_UserSearchResponseDetail) Descriptor() ([]byte, []int) {
	return file_protos_user_user_proto_rawDescGZIP(), []int{15, 0}
}

func (x *UserSearchResponse_UserSearchResponseDetail) GetBungieGlobalDisplayName() string {
	if x != nil {
		return x.BungieGlobalDisplayName
	}
	return ""
}

func (x *UserSearchResponse_UserSearchResponseDetail) GetBungieGlobalDisplayNameCode() int32 {
	if x != nil {
		return x.BungieGlobalDisplayNameCode
	}
	return 0
}

func (x *UserSearchResponse_UserSearchResponseDetail) GetBungieNetMembershipId() int64 {
	if x != nil {
		return x.BungieNetMembershipId
	}
	return 0
}

func (x *UserSearchResponse_UserSearchResponseDetail) GetDestinyMemberships() []*UserInfoCard {
	if x != nil {
		return x.DestinyMemberships
	}
	return nil
}

var File_protos_user_user_proto protoreflect.FileDescriptor

var file_protos_user_user_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x73, 0x2f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa1, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x1f, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xd4, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x61,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x5b, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x75,
	0x6e, 0x67, 0x69, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x75, 0x6e, 0x67,
	0x69, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x75, 0x6e, 0x67,
	0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x75,
	0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b,
	0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x19,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x44, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x75,
	0x6e, 0x67, 0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1b, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xc5, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x0c, 0x0a, 0x0b, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x73, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x73, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x78, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x78, 0x62, 0x6f, 0x78, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x62, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a,
	0x19, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x57, 0x69, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x62, 0x6c, 0x69, 0x7a, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x6c, 0x69,
	0x7a, 0x7a, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x64, 0x69, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x64, 0x69, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x21, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x26, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x11, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x52, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x1a, 0xe7, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x82, 0x01,
	0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x75,
	0x6e, 0x67, 0x69, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x13, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x62, 0x75, 0x6e,
	0x67, 0x69, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x4e, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x1b, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x75, 0x6e,
	0x67, 0x69, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x63, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x18, 0x48, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x22,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53,
	0x61, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x22, 0x5e, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d,
	0x6f, 0x72, 0x65, 0x1a, 0x9b, 0x02, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x1f, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x4e, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x32, 0xe7, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x6f,
	0x69, 0x61, 0x63, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79,
	0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_user_user_proto_rawDescOnce sync.Once
	file_protos_user_user_proto_rawDescData = file_protos_user_user_proto_rawDesc
)

func file_protos_user_user_proto_rawDescGZIP() []byte {
	file_protos_user_user_proto_rawDescOnce.Do(func() {
		file_protos_user_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_user_user_proto_rawDescData)
	})
	return file_protos_user_user_proto_rawDescData
}

var file_protos_user_user_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_protos_user_user_proto_goTypes = []interface{}{
	(*UserMembership)(nil),                                             // 0: user.UserMembership
	(*CrossSaveUserMembership)(nil),                                    // 1: user.CrossSaveUserMembership
	(*UserInfoCard)(nil),                                               // 2: user.UserInfoCard
	(*UserToUserContext)(nil),                                          // 3: user.UserToUserContext
	(*GeneralUser)(nil),                                                // 4: user.GeneralUser
	(*MembershipRequest)(nil),                                          // 5: user.MembershipRequest
	(*UserTheme)(nil),                                                  // 6: user.UserTheme
	(*AvailableThemesResponse)(nil),                                    // 7: user.AvailableThemesResponse
	(*CredentialTypesForAccountResponse)(nil),                          // 8: user.CredentialTypesForAccountResponse
	(*MembershipDataRequest)(nil),                                      // 9: user.MembershipDataRequest
	(*UserMembershipData)(nil),                                         // 10: user.UserMembershipData
	(*HardLinkedCredentialRequest)(nil),                                // 11: user.HardLinkedCredentialRequest
	(*HardLinkedUserMembership)(nil),                                   // 12: user.HardLinkedUserMembership
	(*UserSearchPrefixRequest)(nil),                                    // 13: user.UserSearchPrefixRequest
	(*UserSearchRequest)(nil),                                          // 14: user.UserSearchRequest
	(*UserSearchResponse)(nil),                                         // 15: user.UserSearchResponse
	(*CredentialTypesForAccountResponse_CredentialTypeForAccount)(nil), // 16: user.CredentialTypesForAccountResponse.CredentialTypeForAccount
	(*UserSearchResponse_UserSearchResponseDetail)(nil),                // 17: user.UserSearchResponse.UserSearchResponseDetail
	(enums.BungieMembershipType)(0),                                    // 18: enums.BungieMembershipType
	(*ignores.IgnoreResponse)(nil),                                     // 19: ignores.IgnoreResponse
	(*timestamppb.Timestamp)(nil),                                      // 20: google.protobuf.Timestamp
	(*groups.GroupUserInfoCard)(nil),                                   // 21: groups.GroupUserInfoCard
	(enums.BungieCredentialType)(0),                                    // 22: enums.BungieCredentialType
	(*emptypb.Empty)(nil),                                              // 23: google.protobuf.Empty
}
var file_protos_user_user_proto_depIdxs = []int32{
	18, // 0: user.UserMembership.membership_type:type_name -> enums.BungieMembershipType
	18, // 1: user.CrossSaveUserMembership.applicable_membership_types:type_name -> enums.BungieMembershipType
	18, // 2: user.CrossSaveUserMembership.membership_type:type_name -> enums.BungieMembershipType
	18, // 3: user.UserInfoCard.applicable_membership_types:type_name -> enums.BungieMembershipType
	18, // 4: user.UserInfoCard.membership_type:type_name -> enums.BungieMembershipType
	19, // 5: user.UserToUserContext.ignore_status:type_name -> ignores.IgnoreResponse
	20, // 6: user.UserToUserContext.global_ignore_end_date:type_name -> google.protobuf.Timestamp
	20, // 7: user.GeneralUser.first_access:type_name -> google.protobuf.Timestamp
	20, // 8: user.GeneralUser.last_update:type_name -> google.protobuf.Timestamp
	3,  // 9: user.GeneralUser.context:type_name -> user.UserToUserContext
	20, // 10: user.GeneralUser.status_date:type_name -> google.protobuf.Timestamp
	20, // 11: user.GeneralUser.profile_ban_expire:type_name -> google.protobuf.Timestamp
	6,  // 12: user.AvailableThemesResponse.themes:type_name -> user.UserTheme
	16, // 13: user.CredentialTypesForAccountResponse.credentials:type_name -> user.CredentialTypesForAccountResponse.CredentialTypeForAccount
	18, // 14: user.MembershipDataRequest.membership_type:type_name -> enums.BungieMembershipType
	21, // 15: user.UserMembershipData.destiny_memberships:type_name -> groups.GroupUserInfoCard
	4,  // 16: user.UserMembershipData.bungie_net_user:type_name -> user.GeneralUser
	22, // 17: user.HardLinkedCredentialRequest.cr_type:type_name -> enums.BungieCredentialType
	18, // 18: user.HardLinkedUserMembership.membership_type:type_name -> enums.BungieMembershipType
	13, // 19: user.UserSearchRequest.prefix:type_name -> user.UserSearchPrefixRequest
	17, // 20: user.UserSearchResponse.search_results:type_name -> user.UserSearchResponse.UserSearchResponseDetail
	22, // 21: user.CredentialTypesForAccountResponse.CredentialTypeForAccount.credential_type:type_name -> enums.BungieCredentialType
	2,  // 22: user.UserSearchResponse.UserSearchResponseDetail.destiny_memberships:type_name -> user.UserInfoCard
	5,  // 23: user.User.GetBungieNetUserByID:input_type -> user.MembershipRequest
	5,  // 24: user.User.GetCredentialTypesForTargetAccount:input_type -> user.MembershipRequest
	23, // 25: user.User.GetAvailableThemes:input_type -> google.protobuf.Empty
	9,  // 26: user.User.GetMembershipDataByID:input_type -> user.MembershipDataRequest
	23, // 27: user.User.GetMembershipDataForCurrentUser:input_type -> google.protobuf.Empty
	11, // 28: user.User.GetMembershipFromHardLinkedCredential:input_type -> user.HardLinkedCredentialRequest
	14, // 29: user.User.SearchByGlobalName:input_type -> user.UserSearchRequest
	4,  // 30: user.User.GetBungieNetUserByID:output_type -> user.GeneralUser
	8,  // 31: user.User.GetCredentialTypesForTargetAccount:output_type -> user.CredentialTypesForAccountResponse
	7,  // 32: user.User.GetAvailableThemes:output_type -> user.AvailableThemesResponse
	10, // 33: user.User.GetMembershipDataByID:output_type -> user.UserMembershipData
	10, // 34: user.User.GetMembershipDataForCurrentUser:output_type -> user.UserMembershipData
	12, // 35: user.User.GetMembershipFromHardLinkedCredential:output_type -> user.HardLinkedUserMembership
	15, // 36: user.User.SearchByGlobalName:output_type -> user.UserSearchResponse
	30, // [30:37] is the sub-list for method output_type
	23, // [23:30] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_protos_user_user_proto_init() }
func file_protos_user_user_proto_init() {
	if File_protos_user_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_user_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossSaveUserMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToUserContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableThemesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialTypesForAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMembershipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardLinkedCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardLinkedUserMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSearchPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialTypesForAccountResponse_CredentialTypeForAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_user_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSearchResponse_UserSearchResponseDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_user_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_user_user_proto_goTypes,
		DependencyIndexes: file_protos_user_user_proto_depIdxs,
		MessageInfos:      file_protos_user_user_proto_msgTypes,
	}.Build()
	File_protos_user_user_proto = out.File
	file_protos_user_user_proto_rawDesc = nil
	file_protos_user_user_proto_goTypes = nil
	file_protos_user_user_proto_depIdxs = nil
}
